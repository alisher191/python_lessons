import re


"""
Когда мы пишем какой-то шаблон для регулярных выражений нам необходимо 
использовать сырую строку, она начинается с буквы - r (английская р).
Затем в кавычках (или апострофах) идёт сам шаблон - r"шаблон"

Сырая строка - это строка, в которой отключено экранирование.

"""

text = "adfdfg    aefRGSERGSFBSDF-=-=_+_+_+///43 45 1452   !@@!# %#$% 34545===546357567 36+++#$3"

###################################################################################################################
# 1. Точка заменяет один любой символ на любой другой кроме символа переноса строки.
result = re.search(r"E.G", text) # <re.Match object; span=(16, 19), match='ERG'>
###################################################################################################################
# 2. \d выведет любую цифру.
result = re.search(r"\d", text) # <re.Match object; span=(38, 39), match='4'>

# 2.1 \D выведет любой символ не цифру.
result = re.search(r"\D", text) # <re.Match object; span=(0, 1), match='a'>

# 2.2 Если \d ввести несколько раз, то получим первую последовательность
# из чисел равную введённым количеству \d
result = re.search(r"\d\d\d", text) # <re.Match object; span=(44, 47), match='145'>
###################################################################################################################
# 3. \s выводит пробельные символы (пробел, табуляция, перенос строки и т.д.)
result = re.search(r"\s", text) # <re.Match object; span=(6, 7), match=' '>

# 3.1 \S любой не пробельный символ
result = re.search(r"\S", text) # <re.Match object; span=(0, 1), match='a'>
###################################################################################################################
# 4. \w любая буква, цифра или нижнее подчёркивание
result = re.search(r"\w", text) # <re.Match object; span=(0, 1), match='a'>

# 4.1 \@ любой символ кроме буквы, цифры или нижнего подчёркивания
result = re.search(r"\W", text) # <re.Match object; span=(6, 7), match=' '>
###################################################################################################################
# 5. \b указывает на начало какого либо слова 
result = re.search(r"\baef", text) # <re.Match object; span=(10, 13), match='aef'>
###################################################################################################################
# 6. \B указывает на середину какого либо слова 
result = re.search(r"\BSER", text) # <re.Match object; span=(15, 18), match='SER'>
###################################################################################################################
# 7. + - 1 или несколько вхождений шаблона слева от него, например 'i+' = один или несколько i
result = re.search(r"\d+", text) # <re.Match object; span=(38, 40), match='43'>

# 7.1 * - 0 или более вхождений шаблона слева от него
result = re.search(r"\d*", "12131 345gd gdfgdfgdfg dtext") # <re.Match object; span=(0, 5), match='12131'>
# Сначала поиск находит самое левое совпадение с шаблоном, а во-вторых,
# он пытается использовать как можно большую часть строки - т.е. + и * идут как можно дальше 
# (+ и * называются "жадными").
###################################################################################################################
# 8. [] - Квадратные скобки можно использовать для обозначения набора символов,
# поэтому [abc] соответствует «a», «b» или «c».
result = re.search(r"[1-8]", text) # <re.Match object; span=(38, 39), match='4'>

# 8.1 ^ - кроме, помимо, не считая, за исключением
result = re.search(r"[^145]", text) # <re.Match object; span=(0, 1), match='a'>
###################################################################################################################
# 9. | - одно из двух (выведет ту, которую встретит первее)
result = re.search(r"F|f", text) # <re.Match object; span=(2, 3), match='f'>
###################################################################################################################
# 10. В {} указывем квантификаторы (число повторений)
result = re.search(r"\d{8}", text) # <re.Match object; span=(70, 78), match='54635756'>

# 10.1 {1,8} - от 1 до 8 (через запятую без пробела)
result = re.search(r"\d{1,8}", text) # <re.Match object; span=(38, 40), match='43'>


print(result)
